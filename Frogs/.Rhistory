map("worldHires", xlim=c(-10, 5), ylim=c(35,46), col="gray90", fill=TRUE)
points(locations$V3, locations$V2, pch = 0, col = "black")
points(locations3$V3, locations3$V2, pch = 2, col = "red")
map("worldHires", xlim=c(-10, 5), ylim=c(35,46), col="gray90", fill=TRUE)
locations2 <- read.delim("~/Dropbox/Sexy frogs/Riberica_project/Rana_iberica_Helena_coordinates_uniq_sorted_eastings_lat_longs.csv", header = F)
locations3 <- read.delim("~/Dropbox/Sexy frogs/Riberica_project/Riberica_Samples_all_locations.csv")
points(locations2$V3, locations$V2, pch = 0, col = "black")
points(locations3$V3, locations3$V2, pch = 2, col = "red")
locations3 <- read.delim("~/Dropbox/Sexy frogs/Riberica_project/Riberica_Samples_all_locations.csv", header = F)
points(locations3$V3, locations3$V2, pch = 2, col = "red")
locations2 <- read.delim("~/Dropbox/Sexy frogs/Riberica_project/Helena_sent_samples", header = F)
locations2 <- read.delim("~/Dropbox/Sexy frogs/Riberica_project/Helena_sent_samples", header = F)
locations2
points(locations2$V3, locations$V2, pch = 0, col = "black")
locations2 <- read.delim("~/Dropbox/Sexy frogs/Riberica_project/Helena_sent_samples", header = F)
points(locations2$V3, locations$V2, pch = 0, col = "black")
locations2
points(locations2$V3, locations2$V2, pch = 0, col = "black")
map("worldHires", xlim=c(-10, 5), ylim=c(35,46), col="gray90", fill=TRUE)
locations2 <- read.delim("~/Dropbox/Sexy frogs/Riberica_project/Helena_sent_samples", header = F)
points(locations2$V3, locations2$V2, pch = 0, col = "black")
points(locations2$V2, locations2$V3, pch = 0, col = "black")
points(locations2$V3, locations2$V2, pch = 0, col = "black")
points(locations3$V3, locations3$V2, pch = 2, col = "red")
locations2
locations3
locations2 <- read.delim("~/Dropbox/Sexy frogs/Riberica_project/Helena_sent_samples", header = F)
points(locations2$V3, locations2$V2, pch = 0, col = "black")
locations2 <- read.delim("~/Dropbox/Sexy frogs/Riberica_project/Helena_sent_samples", header = F)
points(locations2$V3, locations2$V2, pch = 0, col = "black")
points(locations3$V3, locations3$V2, pch = 2, col = "red")
install.packages("phytools")
library(phytools)
?read.tree
treemy = read.tree("~/Data/Rana_phylo/Rana_subset/BEAST/100M_MCMC/Rep2/BDNF_3_tree_ann_v1")
treemy
treemy = read.tree("~/Data/Rana_phylo/Rana_subset/BEAST/100M_MCMC/Rep2/BDNF_3_tree_ann_v1")
treemy = read.tree("~/Data/Rana_phylo/Rana_subset/BEAST/100M_MCMC/Rep2/BDNF_3_tree_ann_v1_NEWICK")
treemy
plotTree(Frogs,type="fan",ftype="i")
Frogs = read.tree("~/Data/Rana_phylo/Rana_subset/BEAST/100M_MCMC/Rep2/BDNF_3_tree_ann_v1_NEWICK")
plotTree(Frogs,type="fan",ftype="i")
plotTree(Frogs,type="fan",ftype="i")
plotTree(Frogs,ftype="i")
plotTree(Frogs,ftype="i")
library(ape)
library(phytools)
setwd("~/Data/Rana_phylo/Rana_subset/")
library(ape)
library(phytools)
###################### UPDATED FUNCTION THAT ACCEPTS POLYTOMIES #######################
rerootingMethod<-function(tree,x,model=c("ER","SYM"),...){
if(!is.binary.tree(tree)){
mt<-tree
tree<-multi2di(tree)
multif<-TRUE
} else multif<-FALSE
if(hasArg(tips)) tips<-list(...)$tips
else tips<-NULL
if(!is.matrix(model)) model<-model[1]
n<-length(tree$tip.label)
# if vector convert to binary matrix
if(!is.matrix(x)){
yy<-to.matrix(x,sort(unique(x)))
if(is.null(tips)) tips<-FALSE
} else {
if(is.null(tips)) tips<-TRUE
yy<-x
}
yy<-yy[tree$tip.label,]
yy<-yy/rowSums(yy)
YY<-apeAce(tree,yy,model=model)
Q<-matrix(c(0,YY$rates)[YY$index.matrix+1],length(YY$states),length(YY$states),
dimnames=list(YY$states,YY$states))
diag(Q)<--colSums(Q,na.rm=TRUE)
nn<-if(tips) c(1:n,2:tree$Nnode+n) else 2:tree$Nnode+n
ff<-function(nn){
tt<-reroot(tree,node.number=nn,position=tree$edge.length[which(tree$edge[,2]==nn)])
apeAce(tt,yy,model=model,fixedQ=Q)$lik.anc[1,]
}
XX<-t(sapply(nn,ff))
if(tips) XX<-rbind(XX[1:n,],YY$lik.anc[1,],XX[(n+1):nrow(XX),])
else XX<-rbind(yy,YY$lik.anc[1,],XX)
rownames(XX)<-1:(tree$Nnode+n)
if(tips) rownames(XX)[1:n]<-tree$tip.label
XX<-if(tips) XX else XX[1:tree$Nnode+n,]
if(multif){
M<-matchNodes(mt,tree)
ii<-sapply(M[,2],function(x,y) which(y==x),y=as.numeric(rownames(XX)))
XX<-XX[ii,]
rownames(XX)<-M[,1]
}
return(list(loglik=YY$loglik,Q=Q,marginal.anc=XX))
}
tre<-read.tree("BEAST/100M_MCMC/Rep2/BDNF_3_tree_ann_v1_NEWICK")
plot.phylo(tre)
length(tre$tip.label)
print(tre$tip.label)  ## number of taxa
?
po
?rerootingMethod
write.csv(tre$tip.label, "Anc_states_prob_matrix.csv")  ## number of taxa
mat_chr2<-read.table("Anc_states_prob_matrix.csv", h=T)
mat_chr<-as.matrix(mat_chr2[,3:7])
mat_chr
mat_chr<-as.matrix(mat_chr2)
mat_chr
mat_chr2
anc_sp <- rerootingMethod(tre, mat_chr, model = "ER")
mat_chr
mat_chr1 <- row.names(mat_chr)<-tre$tip.label
mat_chr1
mat_chr2<-read.table("Anc_states_prob_matrix.csv", h=T, row.names = 1)
mat_chr2
mat_chr<-as.matrix(mat_chr2)
mat_chr
anc_sp <- rerootingMethod(tre, mat_chr, model = "ER")
library(ape)
library(phytools)
anc_sp <- rerootingMethod(tre, mat_chr, model = "ER")
??apeAce
library(ace)
library(phytools)
anc_sp <- rerootingMethod(tre, mat_chr, model = "ER")
traceback()
traceback(4)
fitMk()
?fitMk()
apeAce<-function(tree,x,model,fixedQ=NULL,...){
if(hasArg(output.liks)){
output.liks<-list(...)$output.liks
return(fitMk(tree,x,model,fixedQ,...))
} else {
output.liks<-TRUE
return(fitMk(tree,x,model,fixedQ,output.liks=TRUE,...))
}
}
anc_sp <- rerootingMethod(tre, mat_chr, model = "ER")
anc_sp
tiplabels(pie = mat_chr, cex=0.7)#to.matrix(mat_chr, sort(unique(mat_chr))), cex = 1)
nodelabels(node = as.numeric(rownames(anc_sp$marginal.anc)), pie = anc_sp$marginal.anc, cex = 0.6, col = couleurs)
nodelabels(names(anc_sp$marginal.anc))
nodelabels(names(anc_sp$marginal.anc))
couleurs<-c("#189e77", "#d86013", "#7470b2", "#e52d89", "#e6ab01")
for(i in 1:length(anc_sp$marginal.anc)) {
pie(anc_sp$marginal.anc[i,], labels="", main=i, col=couleurs)
}
tiplabels(pie = mat_chr, cex=0.7)#to.matrix(mat_chr, sort(unique(mat_chr))), cex = 1)
nodelabels(node = as.numeric(rownames(anc_sp$marginal.anc)), pie = anc_sp$marginal.anc, cex = 0.6, col = couleurs)
nodelabels(names(anc_sp$marginal.anc))
plot.phylo(tre)
nodelabels(node = as.numeric(rownames(anc_sp$marginal.anc)), pie = anc_sp$marginal.anc, cex = 0.6, col = couleurs)
as.numeric(rownames(anc_sp$marginal.anc))
anc_sp
anc_sp
mat_chr
plot.phylo(tre)
tiplabels(pie = mat_chr, cex=0.7)
as.numeric(rownames(anc_sp$marginal.anc))
anc_sp <- rerootingMethod(tre, mat_chr, model = "ER")
anc_sp
colnames(mat_chr)<-c("1","2","3","5","7", "8")
mat_chr
anc_sp <- rerootingMethod(tre, mat_chr, model = "ER")
plot.phylo(tre)
tiplabels(pie = mat_chr, cex=0.7)#to.matrix(mat_chr, sort(unique(mat_chr))), cex = 1)
nodelabels(node = as.numeric(rownames(anc_sp$marginal.anc)), pie = anc_sp$marginal.anc, cex = 0.6, col = couleurs)
chr_sp<-c(8,1,1,2,"?","?",5,"?",1,"?","?",5,5,1,"?","?",1,2,2,"?","?",3,"?",3,3)
mat_chr2<-read.table("~/Downloads/chr_matrix.txt", h=T)
mat_chr<-as.matrix(mat_chr2[,3:7])
row.names(mat_chr)<-tre$tip.label
mat_chr
tre<-read.tree("BEAST/100M_MCMC/Rep2/BDNF_3_tree_ann_v1_NEWICK")
row.names(mat_chr)<-tre$tip.label
colnames(mat_chr)<-c("1","2","3","5","8")
names(chr_sp)<-tre$tip.label
mat_chr1 <- row.names(mat_chr)<-tre$tip.label
tre<-read.tree("BEAST/100M_MCMC/Rep2/BDNF_3_tree_ann_v1_NEWICK")
plot.phylo(tre)
print(tre$tip.label)  ## number of taxa
mat_chr2<-read.table("Anc_states_prob_matrix.csv", h=T, row.names = 1)
mat_chr<-as.matrix(mat_chr2)
mat_chr1 <- row.names(mat_chr)<-tre$tip.label
mat_chr1
mat_chr2<-read.table("Anc_states_prob_matrix.csv", h=T, row.names = 1)
mat_chr<-as.matrix(mat_chr2)
mat_chr
anc_sp <- rerootingMethod(tre, mat_chr, model = "ER")
anc_sp
print(tre$tip.label)  ## number of taxa
tre<-read.tree("BEAST/100M_MCMC/Rep2/BDNF_3_tree_ann_v1_NEWICK")
plot.phylo(tre)
print(tre$tip.label)  ## get names of taxa
mat_chr2<-read.table("Anc_states_prob_matrix.csv", h=T, row.names = 1)
mat_chr2
anc_sp <- rerootingMethod(tre, mat_chr, model = "ER")
as.numeric(rownames(anc_sp$marginal.anc))
nodelabels(node = as.numeric(rownames(anc_sp$marginal.anc)), pie = anc_sp$marginal.anc, cex = 0.6, col = couleurs)
nodelabels(node = rownames(anc_sp$marginal.anc), pie = anc_sp$marginal.anc, cex = 0.6, col = couleurs)
nodelabels(node = rownames(anc_sp$marginal.anc), pie = anc_sp$marginal.anc, cex = 0.6, col = couleurs)
nodelabels(names(anc_sp$marginal.anc))
plot.phylo(tre)
tiplabels(pie = mat_chr, cex=0.7)#to.matrix(mat_chr, sort(unique(mat_chr))), cex = 1)
nodelabels(node = rownames(anc_sp$marginal.anc), pie = anc_sp$marginal.anc, cex = 0.6, col = couleurs)
nodelabels(node = as.numeric(rownames(anc_sp$marginal.anc)), pie = anc_sp$marginal.anc, cex = 0.6, col = couleurs)
library(ape)
library(phytools)
###################### UPDATED FUNCTION THAT ACCEPTS POLYTOMIES #######################
rerootingMethod<-function(tree,x,model=c("ER","SYM"),...){
if(!is.binary.tree(tree)){
mt<-tree
tree<-multi2di(tree)
multif<-TRUE
} else multif<-FALSE
if(hasArg(tips)) tips<-list(...)$tips
else tips<-NULL
if(!is.matrix(model)) model<-model[1]
n<-length(tree$tip.label)
# if vector convert to binary matrix
if(!is.matrix(x)){
yy<-to.matrix(x,sort(unique(x)))
if(is.null(tips)) tips<-FALSE
} else {
if(is.null(tips)) tips<-TRUE
yy<-x
}
yy<-yy[tree$tip.label,]
yy<-yy/rowSums(yy)
YY<-apeAce(tree,yy,model=model)
Q<-matrix(c(0,YY$rates)[YY$index.matrix+1],length(YY$states),length(YY$states),
dimnames=list(YY$states,YY$states))
diag(Q)<--colSums(Q,na.rm=TRUE)
nn<-if(tips) c(1:n,2:tree$Nnode+n) else 2:tree$Nnode+n
ff<-function(nn){
tt<-reroot(tree,node.number=nn,position=tree$edge.length[which(tree$edge[,2]==nn)])
apeAce(tt,yy,model=model,fixedQ=Q)$lik.anc[1,]
}
XX<-t(sapply(nn,ff))
if(tips) XX<-rbind(XX[1:n,],YY$lik.anc[1,],XX[(n+1):nrow(XX),])
else XX<-rbind(yy,YY$lik.anc[1,],XX)
rownames(XX)<-1:(tree$Nnode+n)
if(tips) rownames(XX)[1:n]<-tree$tip.label
XX<-if(tips) XX else XX[1:tree$Nnode+n,]
if(multif){
M<-matchNodes(mt,tree)
ii<-sapply(M[,2],function(x,y) which(y==x),y=as.numeric(rownames(XX)))
XX<-XX[ii,]
rownames(XX)<-M[,1]
}
return(list(loglik=YY$loglik,Q=Q,marginal.anc=XX))
}
#######################################################################################
#######################################################################################
# Function to allow apeAce backwards compatibility #
apeAce<-function(tree,x,model,fixedQ=NULL,...){
if(hasArg(output.liks)){
output.liks<-list(...)$output.liks
return(fitMk(tree,x,model,fixedQ,...))
} else {
output.liks<-TRUE
return(fitMk(tree,x,model,fixedQ,output.liks=TRUE,...))
}
}
tre<-read.tree("BEAST/100M_MCMC/Rep2/BDNF_3_tree_ann_v1_NEWICK")
plot.phylo(tre)
mat_chr2<-read.table("Anc_states_prob_matrix.csv", h=T, row.names = 1)
anc_sp <- rerootingMethod(tre, mat_chr, model = "ER")
tiplabels(pie = mat_chr, cex=0.7)#to.matrix(mat_chr, sort(unique(mat_chr))), cex = 1)
nodelabels(node = as.numeric(rownames(anc_sp$marginal.anc)), pie = anc_sp$marginal.anc, cex = 0.6, col = couleurs)
couleurs<-c("#189e77", "#d86013", "#7470b2", "#e52d89", "#e6ab01")
nodelabels(node = as.numeric(rownames(anc_sp$marginal.anc)), pie = anc_sp$marginal.anc, cex = 0.6, col = couleurs)
nodelabels(names(anc_sp$marginal.anc))
mat_chr<-as.matrix(mat_chr2)
mat_chr<
mat_chr
mat_chr2<-read.table("Anc_states_prob_matrix.csv", h=T, row.names = 1)
mat_chr<-as.matrix(mat_chr2)
mat_chr
mat_chr[mat_chr==0.167] <- 1/6
mat_chr
anc_sp <- rerootingMethod(tre, mat_chr, model = "ER")
anc_sp
#mat_chr1 <- row.names(mat_chr)<-tre$tip.label
anc_sp <- rerootingMethod(tre, mat_chr, model = "ER")
plot.phylo(tre)
tiplabels(pie = mat_chr, cex=0.7)
nodelabels(node = as.numeric(rownames(anc_sp$marginal.anc)), pie = anc_sp$marginal.anc, cex = 0.6, col = couleurs)
nodelabels(names(anc_sp$marginal.anc))
couleurs<-c("#189e77", "#d86013", "#7470b2", "#e52d89", "#e6ab01")
####################################################################
## Key
for(i in 1:length(anc_sp$marginal.anc)) {
pie(anc_sp$marginal.anc[i,], labels="", main=i, col=couleurs)
}
##
mat_chr_with_undiff2<-read.table("chr_matrix_with_undifferetiated.txt", h=T)
mat_chr_with_undiff<-as.matrix(mat_chr_with_undiff2[,3:8])
row.names(mat_chr_with_undiff)<-tre$tip.label
colnames(mat_chr_with_undiff)<-c("1","2","3","5","8","undiff")
##
## Separated -- you can forget about it, I didn't use it in the end
tree<-read.tree("rerooted_rana_poly_separated.newick.txt")
plot.phylo(tree, show.node.label=T, type="phylogram", root.edge=T)
het<-c("M","F","M","?","M","M","M","M","?","?","?","M","?","M","M","?","M","?","?","M","M","M","?","?","M","M","M","?","M","M","?","M","M","?","M","M","M","?")
names(het)<-tree$tip.label
chr<-as.character(c(8,8,1,"?",1,"1_2",1,"2_3","?","?","?",5,"?",1,3,"?",1,"?","?",5,5,1,"?","?",1,1,2,"?",2,"?","?",3,"?",3,"?",3,5,"?"))
names(chr)<-tree$tip.label
mat_chr
0.1666667*6
tre<-read.tree("BDNF_3_tree_ann_v1_NEWICK")
plot.phylo(tre)
setwd("~/Dropbox/My_Dropbox_Scripts/R/Anc_states_Rana/")
mat_chr
tre<-read.tree("BDNF_3_tree_ann_v1_NEWICK")
plot.phylo(tre)
print(tre$tip.label)  ## get names of taxa
states_df<-read.table("Anc_states_prob_matrix.csv", h=T, row.names = 1)
states_df[mat_chr2==0.167]<-1/6
states_matrix<-as.matrix(states_df)
states_matrix
rowSums(states_df)  ## check sum of rows (mine add up to 1.002 in some cases but still works)
anc_sp <- rerootingMethod(tre, states_matrix, type = "discrete", model = "SYM", tips = TRUE) ## model options are "ER", "SYM" or "ARD" - see ?ace for details
anc_sp
plot.phylo(tre)
couleurs<-c("#189e77", "#d86013", "#7470b2", "#e52d89", "#e6ab01", "black") # Translation = Colours . . .
tiplabels(pie = states_matrix, cex=0.7, piecol = couleurs)
nodelabels(node = as.numeric(rownames(anc_sp$marginal.anc)), pie = anc_sp$marginal.anc, cex = 0.6, piecol = couleurs)
plot.phylo(tre)
tiplabels(pie = states_matrix, cex=0.7, piecol = couleurs)
nodelabels(node = as.numeric(rownames(anc_sp$marginal.anc)), pie = anc_sp$marginal.anc, cex = 0.6, piecol = couleurs)
anc_sp <- rerootingMethod(tre, states_matrix, type = "discrete", model = "ER", tips = TRUE) ## model options are "ER", "SYM" or "ARD" - see ?ace for details
plot.phylo(tre)
tiplabels(pie = states_matrix, cex=0.7, piecol = couleurs)
nodelabels(node = as.numeric(rownames(anc_sp$marginal.anc)), pie = anc_sp$marginal.anc, cex = 0.6, piecol = couleurs)
anc_sp <- rerootingMethod(tre, states_matrix, type = "discrete", model = "SYM", tips = TRUE) ## model options are "ER", "SYM" or "ARD" - see ?ace for details
plot.phylo(tre)
tiplabels(pie = states_matrix, cex=0.7, piecol = couleurs)
nodelabels(node = as.numeric(rownames(anc_sp$marginal.anc)), pie = anc_sp$marginal.anc, cex = 0.6, piecol = couleurs)
anc_sp <- rerootingMethod(tre, states_matrix, type = "discrete", model = "ARD", tips = TRUE) ## model options are "ER", "SYM" or "ARD" - see ?ace for details
plot.phylo(tre)
couleurs<-c("#189e77", "#d86013", "#7470b2", "#e52d89", "#e6ab01", "black") # Translation = Colours . . .
tiplabels(pie = states_matrix, cex=0.7, piecol = couleurs)
nodelabels(node = as.numeric(rownames(anc_sp$marginal.anc)), pie = anc_sp$marginal.anc, cex = 0.6, piecol = couleurs)
setwd("~/Dropbox/TPing/Mol_Ecol_masters_2017/R_code_assistants/")
library("hierfstat")
version("hierfstat")
packageVersion("hierfstat")
R.version
setwd("~/Dropbox/TPing/Mol_Ecol_masters_2017/R_code_assistants/")
microsat<-read.fstat.data("bats/microsat_trimm.dat",na.s=c("NA"))
SNP<-read.fstat.data("bats/RADfeb14.dat",na.s=c("NA"))
head(microsat) ## checkout the first 10 lines of the dataset
microsat.stats<-basic.stats(microsat, diploid=TRUE,digits=4)
SNP.stats<-basic.stats(SNP, diploid=TRUE,digits=4)
microsat.stats
names(microsat.stats) ## print all names of the object "microsat.stats"
?varcomp.glob
microsat
microsat[,1]
microsat[,-1]
varcompMicrosat<-varcomp.glob(levels=microsat[,1],loci=microsat[,-1])
varcompSNP<-varcomp.glob(levels=SNP[,1],loci=SNP[,-1])
varcompMicrosat$F
varcompMicrosat
varcomp.CI.Microsat<-boot.vc(levels=microsat[,1],loci=microsat[,-1],diploid=TRUE,nboot=1000,quant=c(0.025,0.5,0.975))
varcomp.CI.SNP<-boot.vc(levels=SNP[,1],loci=SNP[,-1],diploid=TRUE,nboot=1000,quant=c(0.025,0.5,0.975))
library("adegenet")
dataSSR<-read.fstat("bats/microsat_trimm.dat")
dataSNP<-read.fstat("bats/RADfeb14.dat")
ppfst.microsat_adegenet<-pairwise.fst(dataSSR)
ppfst.SNP_adegenet<-pairwise.fst(dataSNP)
save(ppfst.SNP,file="SNP_saved.csv")
save(ppfst.SNP_adegenet,file="SNP_saved.csv")
load("~/Dropbox/TPing/Mol_Ecol_masters_2017/R_code_assistants/bats/SNP_saved.csv") # the name of the object is ppfst.SNP
load("~/Dropbox/TPing/Mol_Ecol_masters_2017/R_code_assistants/bats/SNP_saved") # the name of the object is ppfst.SNP
geodist<-read.table("bats/geodist.txt", header=F)
dist.geo<-as.dist(geodist,upper=F)
geodist
dist.geo
vect.geo<-as.vector(dist.geo)
vect.fst.Microsatellites<-as.vector(ppfst.microsat_adegenet)
vect.fst.SNP<-as.vector(ppfst.SNP_adegenet)
vect.fst.SNP
mantel.rtest(ppfst.microsat_adegenet, dist.geo,nrepet=9999)
plot(vect.geo,vect.fst.Microsatellites,main="microsatellites",xlab="Geographique distance (km)",ylab="Pairwise Fst Microsatellites")
cor.test(vect.geo,vect.fst.Microsatellites,method="pearson")
abline(lm(vect.fst.Microsatellites~vect.geo),lwd=2,lty=2,col="blue")
dev.off()
plot(vect.geo,vect.fst.Microsatellites,main="microsatellites",xlab="Geographique distance (km)",ylab="Pairwise Fst Microsatellites")
cor.test(vect.geo,vect.fst.Microsatellites,method="pearson")
abline(lm(vect.fst.Microsatellites~vect.geo),lwd=2,lty=2,col="blue")
mantel.rtest(ppfst.SNP_adegenet, dist.geo,nrepet=9999)
plot(vect.geo,vect.fst.SNP,main="SNPs",xlab="Geographique distance (km)",ylab="Pairwise Fst SNPs")
cor.test(vect.geo,vect.fst.SNP,method="pearson")
abline(lm(vect.fst.SNP~vect.geo),lwd=2,lty=2,col="red")
plot(vect.fst.Microsatellites,vect.fst.SNP,xlab="Microsatellite pairwise Fst",ylab="SNP pairwise Fst")
abline(lm(vect.fst.SNP~vect.fst.Microsatellites), col="black")
mantel.rtest(ppfst.microsat,ppfst.SNP,nrepet=9999)
mantel.rtest(ppfst.microsat_adegenet,ppfst.SNP,nrepet=9999)
ppfst.microsat_adegenet
ppfst.SNP
plot(vect.fst.Microsatellites,vect.fst.SNP,xlab="Microsatellite pairwise Fst",ylab="SNP pairwise Fst")
abline(lm(vect.fst.SNP~vect.fst.Microsatellites), col="black")
mantel.rtest(ppfst.microsat_adegenet,ppfst.SNP,nrepet=9999)
str(ppfst.microsat_adegenet)
str(ppfst.SNP)
mantel.rtest(ppfst.microsat_adegenet,ppfst.SNP_adegenet,nrepet=9999)
microsat.stats.Ho.pop<-colMeans(microsat.stats$Ho,na.rm=TRUE)
SNP.stats.Ho.pop<-colMeans(SNP.stats$Ho,na.rm=TRUE)
cor.test(microsat.stats.Ho.pop,SNP.stats.Ho.pop,method="pearson")
plot(microsat.stats.Ho.pop,SNP.stats.Ho.pop)
abline(lm(SNP.stats.Ho.pop~microsat.stats.Ho.pop), col="red")
microsat.stats.Hs.pop<-colMeans(microsat.stats$Hs,na.rm=TRUE)
SNP.stats.Hs.pop<-colMeans(SNP.stats$Hs,na.rm=TRUE)
cor.test(microsat.stats.Hs.pop,SNP.stats.Hs.pop,method="pearson")
plot(microsat.stats.Hs.pop,SNP.stats.Hs.pop)
abline(lm(SNP.stats.Hs.pop~microsat.stats.Hs.pop))
abline(lm(SNP.stats.Hs.pop~microsat.stats.Hs.pop), col = "red")
cor.test(SNP.stats.Ho.pop,SNP.stats.Hs.pop,method="pearson")
plot(SNP.stats.Ho.pop,SNP.stats.Hs.pop)
abline(lm(SNP.stats.Hs.pop, SNP.stats.Ho.pop), col = "red")
abline(lm(SNP.stats.Hs.pop ~ SNP.stats.Ho.pop), col = "red")
Popnames<-read.table("bats/pop.txt",header=F)
pops<-rep(Popnames[,2])[microsat[,1]]
col<-c("red","blue","orange","orange","orange","orange","green","green","green","green","lightblue","lightblue","lightblue","purple","purple","purple","purple","yellow","yellow")
popcols<-rep(col)[microsat$Pop]
pcamsat<-indpca(microsat,ind.labels=pops)
plot(pcamsat,col=popcols,eigen=T)
pcaSNP<-indpca(SNP,ind.labels=pops)
plot(pcaSNP, col=popcols,eigen=T)
pcaSNP
plot(pcaSNP, col = popcols)
plot(pcaSNP, col = popcols)
dev.off()
plot(pcaSNP, col = popcols)
plot(pcaSNP, col = popcols, main = "Principle component analyses (PC1 & PC2)")
install.packages("ggmap")
library(ggmap)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
detach("package:ade4", unload=TRUE)
detach("package:adegenet", unload=TRUE)
library(ggmap)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("simRAD")
install.packages("SimRAD")
installed.packages("Biostrings")
installed.packages("ShortRead")
install.packages("Biostrings")
install.packages("SimRAD")
install.packages("Biostrings")
load("~/Data/RADseq/Hybridogens/Hybridogens_paper/PCA_workspace_DLJ.RData")
pca1
Sex_sorter(pca1,   ## PCA object
sexes,  ## sex_info file
c(1,2), ## which components to plotb
Title = "Phased Hybridogens_all samples_PC_1_2", ## plot title
xtitle = "PC1", ## X axis title
ytitle = "PC2", ## Y axis title
Palette = rainbow(7), ## Colours to use
func_cex = 2) ## Size of points and text in plots)
library(adegenet)
library(ggplot2)
Sex_sorter(pca1,   ## PCA object
sexes,  ## sex_info file
c(1,2), ## which components to plotb
Title = "Phased Hybridogens_all samples_PC_1_2", ## plot title
xtitle = "PC1", ## X axis title
ytitle = "PC2", ## Y axis title
Palette = rainbow(7), ## Colours to use
func_cex = 2) ## Size of points and text in plots)
library(ASMap)
install.packages("ASMap")
install.packages("adegenet")
install.packages("spdep")
install.packages("sf")
install.packages("sf", configure.args='--with-gdal-config=/usr/bin/gdal-config')
install.packages("sf") #, configure.args='--with-gdal-config=/usr/bin/gdal-config')
install.packages("sf") #, configure.args='--with-gdal-config=/usr/bin/gdal-config')
devtools::install_github("r-spatial/sf")
"/usr/bin/proj
## Install necassary packages (make this a separate script?)
install.packages("devtools")
library(devtools)
devtools::install_github("thierrygosselin/radiator")  ## took a good 10-15 mins to install
install_github("zhengxwen/gdsfmt")
install_github("zhengxwen/SNPRelate")
## Filters using Radiator?
library(radiator)
setwd("~/Data/MolGenMethods_2019/Frogs/")
Hyla <- read_vcf("batch_1.vcf", strata = "popmap_kept_largepops_latitude.txt")
Hyla_conversion <- genomic_converter("batch_1.vcf",
strata = "popmap_kept_largepops_latitude.txt",
output = "snprelate",
filename = "Hyla_SNPrelate_format")
## Use SNPRelate for the popgen
library(SNPRelate)
snpgdsSummary("01_radiator_genomic_converter_20190829@1553/Hyla_SNPrelate_format_snprelate_20190829@1554.gds.rad")
Hyla_data <- snpgdsOpen()
"01_radiator_genomic_converter_20190829@1553/Hyla_SNPrelate_format_snprelate_20190829@1554.gds.rad")
library(devtools)
install.packages("devtools")
devtools::install_github("r-spatial/sf")
devtools::install_github("thierrygosselin/radiator")  ## took a good 10-15 mins to install
install.packages("installr")
R.version()
version()
R.version
